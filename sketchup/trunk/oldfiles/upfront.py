# Copyright (c) 2012 Santosh Philip# This file is part of eppy.# Eppy is free software: you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation, either version 3 of the License, or# (at your option) any later version.# Eppy is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.# You should have received a copy of the GNU General Public License# along with eppy.  If not, see <http://www.gnu.org/licenses/>.import mylib1,mylib2import osimport stringclass UpfrontVersionError(Exception):    passmlinesep='\r'def makefloat(ls):    l=[]    for i in range(0,len(ls)):        l=l+[float(ls[i])]    return ldef makeintminus1(ls):    l=[]    for i in range(0,len(ls)):        l=l+[int(ls[i])-1]    return ldef getptply(file):#get pt and poly from an upf2 file. Kill the 1st poly that upf2 creates    a=mylib2.readfile(file)    b=a    b=b[b.find('# Points'):]    ls=b.split('#')    ptstr=ls[1]    plstr=ls[2]    pt=ptstr.split(mlinesep)[1:-1]    pt=map(lambda p:makefloat(p.split()[2:]),pt)    pl=plstr.split(mlinesep)[1:-1]    p=[]    for i in range(0,len(pl)):        if (i % 2)==1:p=p+[pl[i]]    pl=p    pl=map(lambda p:makeintminus1(p.split()[3:-1]),pl)    pl.pop(0)    return[pt,pl]def getptply1(file):#get pt and poly from an upf2 file. Kill the 1st poly that upf2 creates    a=mylib2.readfile(file)    b=a    b=b[b.find('# Points'):]    ls=b.split('#')    ptstr=ls[1]    plstr=ls[2]    pt=ptstr.split(mlinesep)[1:-1]    pt=map(lambda p:makefloat(p.split()[2:]),pt)    pl=plstr.split(mlinesep)[1:-1]    pl = getplanes(pl)    for i in range(len(pl)):        pl[i] = [el-1 for el in pl[i]]    pl.pop(0)    return[pt,pl]def pt2file_up2(pt):#does not work    st=''    for i in range(0,len(pt)):        ln=''        ln=ln+'5 '+str(i+1)+' '        ln=ln+str(pt[i][0])+' '+str(pt[i][1])+' '+str(pt[i][2])        st=st+ln+mlinesep    return stdef pl2file_up2(pl):#does not work    #generate l1    l1=[]    for i in range(0,len(pl)):        ln=''        ln=ln+'6 '+str(i+1)+' 2 '+'2 2 0 4 0 '+str(i+1)+' 0'        l1=l1+[ln]    #generate l1    l2=[]    pstr=''    for i in range(0,len(pl)):        l=''        for j in range(0,len(pl[i])):            l=l+str(pl[i][j])+' '        l2=l2+[l]    #both lines    st=''    for i in range(0,len(pl)):        st=st+l1[i]+mlinesep        st=st+'7 '+str(i+1)+' 0 '+l2[i]+'0'+mlinesep    return st    # mlinesep='\r'# f='/Users/santosh/Documents/jythonplay/A.UP2'# [pt,pl]=getptply(f)# # tf='/Users/santosh/Documents/jythonplay/templateup2.txt'# a=mylib2.readfile(tf)# ls=a.split('==========\r')# #join# st=ls[0]+pt2file(pt)+ls[1]+pl2file(pl)+ls[2]# mylib1.writeStr2File('/Users/santosh/Documents/jythonplay/c.upf',st)def pt2file_up1(pt):    st=''    for i in range(0,len(pt)):        ln=''        j=i+1        p1=pt[i][0]        p2=pt[i][1]        p3=pt[i][2]        m=mlinesep        ln='%(ln)s %(j)d %(p1)f %(p2)f %(p3)f%(m)s' %vars()        st=st+ln    return stdef pl2file_up1(pl):    st=''    for i in range(0,len(pl)):        ln=''        plst=''        for j in range(0,len(pl[i])):            plst=plst+' '+str(pl[i][j]+1)        ln=ln+str(len(pl[i]))+' '+plst+'  2 1 0 4\r'        st=st+ln    return stdef ptpl2up1file(pt,pl,tf,outfile):#converts an list of points and polygons into an upfront1 file file#pt,pl=points, polygons#tf= template file for upf1. It is also glued below#outfile= outputfile    #tf='/Users/santosh/Documents/jythonplay/templateup1.txt'    st=''    a=mylib1.readfile(tf)    #put num of points and poly into template file    ls=a.split(mlinesep)    ln=ls[1]    lnls=ln.split()    lnls[0]=str(len(pt))    lnls[1]=str(len(pl))    ls[1]=string.join(lnls)    a=string.join(ls,mlinesep)        st=a+pt2file_up1(pt)+pl2file_up1(pl)    mylib1.writeStr2File(outfile,st)# mlinesep='\r'# f='/Users/santosh/Documents/jythonplay/a.UP2'# [pt,pl]=upfront.getptply(f)# # # upfront.ptpl2up1file(pt,pl,'/Users/santosh/Documents/jythonplay/templateup1.txt','/Users/santosh/Documents/jythonplay/aa.up1')# # ls=a.split(mlinesep)# ln=ls[1]# lnls=ln.split()# lnls[0]=str(len(pt))# lnls[1]=str(len(pl))# ls[1]=string.join(lnls)# a=string.join(ls,mlinesep)# # the template file used for upf1# ===============================# VERSION C# 8 6 24 0 0 0#        8        8 14.0 45.0 mth,day,hr,lat# 51.56 230.64 alt,azm#  82  82  76 sun#  58  58  59 sky# 100  99  93 ground#  27  27  25 outline#  68  66  61 grid#  75  79 100  color 1#  77 100  73  color 2# 100  71  76  color 3#  98 100  65  color 4#  97  74 100  color 5#  19  20 100  color 6#  20 100  20  color 7# 100  20  20  color 8# 100 100  20  color 9# 100  20 100  color 10#  22  51  56  color 11#  38  58  16  color 12#  62  14  33  color 13#  62  39  16  color 14#  42  23  64  color 15#  11  12  23  color 16#  10  25  10  color 17#  33   2   2  color 18#  23  21  10  color 19#  20   7  16  color 20#   0   0 100  color 21#   0 100   0  color 22# 100   0   0  color 23# 100 100   0  color 24#  94  94  94  color 25# 0 4# 1# 0# Start#        1# Home# 30.0 -30.0 30.0 0.0 0.0 0.0 30.0# 30.0 -30.0 30.0 0.0 0.0 0.0 30.0# 1.0 1.0   1   4# 0.0 0.0 0.0# 0.0 BaseAngle# 1.0 30.0# 0.025 2.5 22.5        4# 1.0 3.0# 1 0 1 1 0 0 1 2 1 0 def oneplane(pt,ply,pl):    """return the 'pt and ply', for a specific polygon pl in ptply    """    pt = [pt[item] for item in ply[pl]]    return [pt, [range(len(ply[pl])), ]]def getplanes(stringlist):    """Upfront Version D, the planes may be split over more than one line    Get the planes from this file snippet.    """    for i in range(len(stringlist)):        words = stringlist[i].split()        if words[0] == '6':            stringlist[i] = '-------------'        if words[0] == '7':            stringlist[i] = ' '.join(words[3:-1])    stringlist = ' '.join(stringlist)    stringlist = stringlist.split('-------------')    stringlist = [item.split() for item in stringlist]    stringlist = [item for item in stringlist if item != []]    plane = []    for item in stringlist:        plane.append([int(el) for el in item])    return planedef readupfversion1(up1file):    """Return points and polygons for an upfront 1 file    """    up1txt = mylib2.readfile(up1file)    up1list = up1txt.splitlines()    version = up1list[0]    if version != 'VERSION C':        raise UpfrontVersionError, 'not upfront version 1'    line2 = up1list[1].split()    numpts = int(line2[0])    numply = int(line2[1])    pts = up1list[-numply - numpts : -numply]    ply = up1list[-numply:]    pts = [item.split()[1:] for item in pts]    pts = [[float(n) for n in item] for item in pts]    ply = [item.split()[:-4] for item in ply]    for i, itemi in enumerate(ply):        itemi.pop(0)        for j, itemj in enumerate(itemi):            itemi[j] = int(itemi[j])            itemi[j] -= 1        ply[i] = itemi#    ply = [[int(n)-1 for n in item] for item in ply]    return [pts, ply]def saveupfver1((pt, pl), outfile=None):    """save as upfront file version1    """    str1 = """VERSION C"""    str2 = """           8            8 14 45 mth,day,hr,lat51.55775388760085 230.64196201505965 alt,azm 81  81  81 sun 62  62  62 sky100  99  93 ground 27  27  25 outline 50  50  50 grid 60  60  80 color 1 60  80  60 color 2 80  60  60 color 3 80  80  48 color 4 80  60  80 color 5 25  25 100 color 6 25 100  25 color 7100  25  25 color 8100 100  25 color 9100  25 100 color 10 25  50  50 color 11 38  58  16 color 12 62  14  33 color 13 61  39  16 color 14 42  19  64 color 15 16  16  40 color 16 16  40  16 color 17 40   2   2 color 18 40  40  16 color 19 40  16  40 color 20  0   0 100 color 21  0 100   0 color 22100   0   0 color 23100 100   0 color 24 94  94  94 color 250 4253	10Layer 1           1Home30 -30 30 0 0 0 3030 -30 30 0 0 0 301 1   1   40 0 00 BaseAngle1 300.025 2.5 22.5            41 8.01 1 1 1 0 0 1 2 1 0 """    line1 = '%s %s 24 0 0 0\n' %(len(pt), len(pl))    lst = []    for i, point in enumerate(pt):        point = ['%f' % (p, ) for p in point] # upfront is unable to read numbers in the format 10e-4                                                # reformat to avoid this problem        ls = [i + 1] + point        ls = [str(item) for item in ls]        ' '.join(ls)        lst.append(' '.join(ls))    printpt = '\n'.join(lst) + '\n'    lst = []    for i, poly in enumerate(pl):        ls = [str(len(poly))] + [str(p + 1) for p in poly]        lst.append(' '.join(ls) + '  2 2 0 4')    printpl = '\n'.join(lst)     up1txt = str1 + line1 + str2 + printpt + printpl    if outfile:        mylib1.writeStr2File(outfile, up1txt)    return up1txt    def mergeupf((pts1, pls1), (pts2, pls2)):    """merge 2 upf files into a single file    """    numpts1 = len(pts1)    pts = pts1 + pts2    newpls2 = []    for plane in pls2:        plane = [pt + numpts1 for pt in plane]        newpls2.append(plane)    pls = pls1 + newpls2    return pts, plsdef upfmove(pts,(x, y, z)):    return [[pt[0] + x, pt[1] + y, pt[2] + z] for pt in pts]def bounds(pts):    """return the lower and upper bounds of the model    return as (low, high) where low=(x,y,z), high=(x,y,z)"""    trans_pts = transpose_array(pts)    low = (min(trans_pts[0]), min(trans_pts[1]), min(trans_pts[2]))    high = (max(trans_pts[0]), max(trans_pts[1]), max(trans_pts[2]))    return low, high    def transpose_array(arr):    """transpose a two-dimensional array"""    return map(list, zip(*arr))