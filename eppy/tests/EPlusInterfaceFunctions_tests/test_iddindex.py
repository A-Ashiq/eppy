"""py.test for idd_index"""

from eppy.EPlusInterfaceFunctions import iddindex

commlst = [
    
# version
[{u'format': [u'singleLine'],
  u'group': u'Simulation Parameters',
  u'idfobj': u'Version',
  u'memo': [u'Specifies the EnergyPlus version of the IDF file.'],
  u'unique-object': [u'']},
 {u'default': [u'7.0'],
  u'field': [u'Version Identifier'],
  u'required-field': [u'']}],

# zone
[{u'format': [u'vertices'],
  u'group': u'Thermal Zones and Surfaces',
  u'idfobj': u'Zone',
  u'memo': [u'Defines a thermal zone of the building.']},
 {u'field': [u'Name'],
  u'reference': [u'ZoneNames',
   u'OutFaceEnvNames',
   u'ZoneAndZoneListNames',
   u'AirflowNetworkNodeAndZoneNames'],
  u'required-field': [u''],
  u'type': [u'alpha']},
 {u'default': [u'0'],
  u'field': [u'Direction of Relative North'],
  u'type': [u'real'],
  u'units': [u'deg']},
 {u'default': [u'0'],
  u'field': [u'X Origin'],
  u'type': [u'real'],
  u'units': [u'm']},
 {u'default': [u'0'],
  u'field': [u'Y Origin'],
  u'type': [u'real'],
  u'units': [u'm']},
 {u'default': [u'0'],
  u'field': [u'Z Origin'],
  u'type': [u'real'],
  u'units': [u'm']},
 {u'default': [u'1'],
  u'field': [u'Type'],
  u'maximum': [u'1'],
  u'minimum': [u'1'],
  u'type': [u'integer']},
 {u'default': [u'1'],
  u'field': [u'Multiplier'],
  u'minimum': [u'1'],
  u'type': [u'integer']},
 {u'autocalculatable': [u''],
  u'default': [u'autocalculate'],
  u'field': [u'Ceiling Height'],
  u'note': [u'If this field is 0.0, negative or autocalculate, then the average height',
   u'of the zone is automatically calculated and used in subsequent calculations.',
   u'If this field is positive, then the number entered here will be used.',
   u'Note that the Zone Ceiling Height is the distance from the Floor to',
   u'the Ceiling in the Zone, not an absolute height from the ground.'],
  u'type': [u'real'],
  u'units': [u'm']},
 {u'autocalculatable': [u''],
  u'default': [u'autocalculate'],
  u'field': [u'Volume'],
  u'note': [u'If this field is 0.0, negative or autocalculate, then the volume of the zone',
   u'is automatically calculated and used in subsequent calculations.',
   u'If this field is positive, then the number entered here will be used.'],
  u'type': [u'real'],
  u'units': [u'm3']},
 {u'autocalculatable': [u''],
  u'default': [u'autocalculate'],
  u'field': [u'Floor Area'],
  u'note': [u'If this field is 0.0, negative or autocalculate, then the floor area of the zone',
   u'is automatically calculated and used in subsequent calculations.',
   u'If this field is positive, then the number entered here will be used.'],
  u'type': [u'real'],
  u'units': [u'm2']},
 {u'field': [u'Zone Inside Convection Algorithm'],
  u'key': [u'Simple',
   u'TARP',
   u'CeilingDiffuser',
   u'AdaptiveConvectionAlgorithm',
   u'TrombeWall'],
  u'note': [u'Will default to same value as SurfaceConvectionAlgorithm:Inside object',
   u'setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone',
   u'Simple = constant natural convection (ASHRAE)',
   u'TARP = variable natural convection based on temperature difference (ASHRAE)',
   u'CeilingDiffuser = ACH based forced and mixed convection correlations',
   u'for ceiling diffuser configuration with simple natural convection limit',
   u'AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions',
   u'TrombeWall = variable natural convection in an enclosed rectangular cavity'],
  u'type': [u'choice']},
 {u'field': [u'Zone Outside Convection Algorithm'],
  u'key': [u'SimpleCombined',
   u'TARP',
   u'DOE-2',
   u'MoWiTT',
   u'AdaptiveConvectionAlgorithm'],
  u'note': [u'Will default to same value as SurfaceConvectionAlgorithm:Outside object',
   u'setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone',
   u'SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model',
   u'TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al.',
   u'MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces',
   u'DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces',
   u'AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions'],
  u'type': [u'choice']},
 {u'default': [u'Yes'],
  u'field': [u'Part of Total Floor Area'],
  u'key': [u'Yes', u'No'],
  u'type': [u'choice']}],

# window  
[{u'group': u'Thermal Zones and Surfaces',
  u'idfobj': u'Window',
  u'memo': [u'Allows for simplified entry of Windows.']},
 {u'field': [u'Name'],
  u'reference': [u'SubSurfNames',
   u'SurfAndSubSurfNames',
   u'AllHeatTranSurfNames',
   u'OutFaceEnvNames',
   u'AllHeatTranAngFacNames',
   u'RadGroupAndSurfNames',
   u'SurfGroupAndHTSurfNames',
   u'AllShadingAndHTSurfNames'],
  u'required-field': [u''],
  u'type': [u'alpha']},
 {u'field': [u'Construction Name'],
  u'note': [u'To be matched with a construction in this input file'],
  u'object-list': [u'ConstructionNames'],
  u'required-field': [u''],
  u'type': [u'object-list']},
 {u'field': [u'Building Surface Name'],
  u'note': [u'Name of Surface (Wall, usually) the Window is on (i.e., Base Surface)',
   u'Window assumes the azimuth and tilt angles of the surface it is on.'],
  u'object-list': [u'SurfaceNames'],
  u'required-field': [u''],
  u'type': [u'object-list']},
 {u'field': [u'Shading Control Name'],
  u'note': [u'enter the name of a WindowProperty:ShadingControl object',
   u'used for windows and glass doors only',
   u'If not specified, window or glass door has no shading (blind, roller shade, etc.)'],
  u'object-list': [u'WindowShadeControlNames'],
  u'type': [u'object-list']},
 {u'field': [u'Frame and Divider Name'],
  u'note': [u'Enter the name of a WindowProperty:FrameAndDivider object',
   u'Used only for exterior windows (rectangular) and glass doors.',
   u'Unused for triangular windows.',
   u'If not specified (blank), window or glass door has no frame or divider',
   u'and no beam solar reflection from reveal surfaces.'],
  u'object-list': [u'WindowFrameAndDividerNames'],
  u'type': [u'object-list']},
 {u'default': [u'1.0'],
  u'field': [u'Multiplier'],
  u'minimum': [u'1.0'],
  u'note': [u'Used only for Surface Type = WINDOW, GLASSDOOR or DOOR',
   u'Non-integer values will be truncated to integer']},
 {u'field': [u'Starting X Coordinate'],
  u'note': [u'Window starting coordinate is specified relative to the Base Surface origin.'],
  u'units': [u'm']},
 {u'field': [u'Starting Z Coordinate'],
  u'note': [u'How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)'],
  u'units': [u'm']},
 {u'field': [u'Length'], u'units': [u'm']},
 {u'field': [u'Height'], u'units': [u'm']}],

# Wall:Exterior  
[{u'group': u'Thermal Zones and Surfaces',
  u'idfobj': u'Wall:Exterior',
  u'memo': [u'Allows for simplified entry of exterior walls.',
   u'View Factor to Ground is automatically calculated.']},
 {u'field': [u'Name'],
  u'reference': [u'SurfaceNames',
   u'SurfAndSubSurfNames',
   u'AllHeatTranSurfNames',
   u'HeatTranBaseSurfNames',
   u'AllHeatTranAngFacNames',
   u'RadGroupAndSurfNames',
   u'SurfGroupAndHTSurfNames',
   u'AllShadingAndHTSurfNames'],
  u'required-field': [u''],
  u'type': [u'alpha']},
 {u'field': [u'Construction Name'],
  u'note': [u'To be matched with a construction in this input file'],
  u'object-list': [u'ConstructionNames'],
  u'required-field': [u''],
  u'type': [u'object-list']},
 {u'field': [u'Zone Name'],
  u'note': [u'Zone the surface is a part of'],
  u'object-list': [u'ZoneNames'],
  u'required-field': [u''],
  u'type': [u'object-list']},
 {u'field': [u'Azimuth Angle'],
  u'maximum': [u'360'],
  u'minimum': [u'0'],
  u'note': [u'Facing direction of outside of wall (S=180,N=0,E=90,W=270)'],
  u'units': [u'deg']},
 {u'default': [u'90'],
  u'field': [u'Tilt Angle'],
  u'maximum': [u'180'],
  u'minimum': [u'0'],
  u'note': [u'Walls are usually tilted 90 degrees'],
  u'units': [u'deg']},
 {u'field': [u'Starting X Coordinate'],
  u'note': [u'Starting (x,y,z) coordinate is the Lower Left Corner of the Wall'],
  u'units': [u'm']},
 {u'field': [u'Starting Y Coordinate'], u'units': [u'm']},
 {u'field': [u'Starting Z Coordinate'], u'units': [u'm']},
 {u'field': [u'Length'], u'units': [u'm']},
 {u'field': [u'Height'], u'units': [u'm']}]
]

def test_makename2refdct():
    """py.test for makename2refdct"""
    expected = {
        'ZONE':[u'ZoneNames',
               u'OutFaceEnvNames',
               u'ZoneAndZoneListNames',
               u'AirflowNetworkNodeAndZoneNames'],
        'WINDOW':[u'SubSurfNames',
               u'SurfAndSubSurfNames',
               u'AllHeatTranSurfNames',
               u'OutFaceEnvNames',
               u'AllHeatTranAngFacNames',
               u'RadGroupAndSurfNames',
               u'SurfGroupAndHTSurfNames',
               u'AllShadingAndHTSurfNames'],
        'WALL:EXTERIOR':[u'SurfaceNames',
               u'SurfAndSubSurfNames',
               u'AllHeatTranSurfNames',
               u'HeatTranBaseSurfNames',
               u'AllHeatTranAngFacNames',
               u'RadGroupAndSurfNames',
               u'SurfGroupAndHTSurfNames',
               u'AllShadingAndHTSurfNames']
   }
    result = iddindex.makename2refdct(commlst)
    assert result == expected