# Copyright (c) 2016 Santosh Philip
# =======================================================================
#  Distributed under the MIT License.
#  (See accompanying file LICENSE or copy at
#  http://opensource.org/licenses/MIT)
# =======================================================================
"""py.test for idd_index"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals


from eppy.EPlusInterfaceFunctions import iddindex

commdct = [[{u'format': [u'singleLine'],
   u'group': u'Simulation Parameters',
   u'idfobj': u'Version',
   u'memo': [u'Specifies the EnergyPlus version of the IDF file.'],
   u'unique-object': [u'']},
  {u'default': [u'7.0'],
   u'field': [u'Version Identifier'],
   u'required-field': [u'']}],

 [{u'group': u'Simulation Parameters',
   u'idfobj': u'Building',
   u'memo': [u'Describes parameters that are used during the simulation',
    u'of the building. There are necessary correlations between the entries for',
    u'this object and some entries in the Site:WeatherStation and',
    u'Site:HeightVariation objects, specifically the Terrain field.'],
   u'min-fields': [u'8'],
   u'required-object': [u''],
   u'unique-object': [u'']},
  {u'default': [u'NONE'],
   u'field': [u'Name'],
   u'required-field': [u''],
   u'retaincase': [u'']},
  {u'default': [u'0.0'],
   u'field': [u'North Axis'],
   u'note': [u'degrees from true North'],
   u'type': [u'real'],
   u'units': [u'deg']}],
    
 [{u'format': [u'vertices'],
   u'group': u'Thermal Zones and Surfaces',
   u'idfobj': u'Zone',
   u'memo': [u'Defines a thermal zone of the building.']},
  {u'field': [u'Name'],
   u'reference': [u'ZoneNames',
    u'OutFaceEnvNames',
    u'ZoneAndZoneListNames',
    u'AirflowNetworkNodeAndZoneNames'],
   u'required-field': [u''],
   u'type': [u'alpha']},
  {u'default': [u'0'],
   u'field': [u'Direction of Relative North'],
   u'type': [u'real'],
   u'units': [u'deg']},
],

 [{u'extensible:3': [u'-- duplicate last set of x,y,z coordinates (last 3 fields), remembering to remove ; from "inner" fields.'],
   u'format': [u'vertices'],
   u'group': u'Thermal Zones and Surfaces',
   u'idfobj': u'BuildingSurface:Detailed',
   u'memo': [u'Allows for detailed entry of building heat transfer surfaces. Does not include subsurfaces such as windows or doors.'],
   u'min-fields': [u'19']},
  {u'field': [u'Name'],
   u'reference': [u'SurfaceNames',
    u'SurfAndSubSurfNames',
    u'AllHeatTranSurfNames',
    u'HeatTranBaseSurfNames',
    u'OutFaceEnvNames',
    u'AllHeatTranAngFacNames',
    u'RadGroupAndSurfNames',
    u'SurfGroupAndHTSurfNames',
    u'AllShadingAndHTSurfNames'],
   u'required-field': [u''],
   u'type': [u'alpha']},
  {u'field': [u'Surface Type'],
   u'key': [u'Floor', u'Wall', u'Ceiling', u'Roof'],
   u'required-field': [u''],
   u'type': [u'choice']},
],

 [{u'format': [u'vertices'],
   u'group': u'Thermal Zones and Surfaces',
   u'idfobj': u'FenestrationSurface:Detailed',
   u'memo': [u'Allows for detailed entry of subsurfaces',
    u'(windows, doors, glass doors, tubular daylighting devices).'],
   u'min-fields': [u'19']},
  {u'field': [u'Name'],
   u'reference': [u'SubSurfNames',
    u'SurfAndSubSurfNames',
    u'AllHeatTranSurfNames',
    u'OutFaceEnvNames',
    u'AllHeatTranAngFacNames',
    u'RadGroupAndSurfNames',
    u'SurfGroupAndHTSurfNames',
    u'AllShadingAndHTSurfNames'],
   u'required-field': [u''],
   u'type': [u'alpha']},
  {u'field': [u'Surface Type'],
   u'key': [u'Window',
    u'Door',
    u'GlassDoor',
    u'TubularDaylightDome',
    u'TubularDaylightDiffuser'],
   u'required-field': [u''],
   u'type': [u'choice']},
],

[{u'group': u'Thermal Zones and Surfaces',
   u'idfobj': u'Wall:Exterior',
   u'memo': [u'Allows for simplified entry of exterior walls.',
    u'View Factor to Ground is automatically calculated.']},
  {u'field': [u'Name'],
   u'reference': [u'SurfaceNames',
    u'SurfAndSubSurfNames',
    u'AllHeatTranSurfNames',
    u'HeatTranBaseSurfNames',
    u'AllHeatTranAngFacNames',
    u'RadGroupAndSurfNames',
    u'SurfGroupAndHTSurfNames',
    u'AllShadingAndHTSurfNames'],
   u'required-field': [u''],
   u'type': [u'alpha']},
  {u'field': [u'Construction Name'],
   u'note': [u'To be matched with a construction in this input file'],
   u'object-list': [u'ConstructionNames'],
   u'required-field': [u''],
   u'type': [u'object-list']}],
  
 [{u'group': u'Thermal Zones and Surfaces',
   u'idfobj': u'Window',
   u'memo': [u'Allows for simplified entry of Windows.']},
  {u'field': [u'Name'],
   u'reference': [u'SubSurfNames',
    u'SurfAndSubSurfNames',
    u'AllHeatTranSurfNames',
    u'OutFaceEnvNames',
    u'AllHeatTranAngFacNames',
    u'RadGroupAndSurfNames',
    u'SurfGroupAndHTSurfNames',
    u'AllShadingAndHTSurfNames'],
   u'required-field': [u''],
   u'type': [u'alpha']},
  {u'field': [u'Construction Name'],
   u'note': [u'To be matched with a construction in this input file'],
   u'object-list': [u'ConstructionNames'],
   u'required-field': [u''],
   u'type': [u'object-list']}]
]

def test_makename2refdct():
    """py.test for makename2refdct"""
    # do a simple test
    thedata = (
    (
        {'ZONE':['Z1', 'Z2'], },
        [
            [{'idfobj':'zone'}, {'field':['Name'], 'reference':['Z1', 'Z2']}],
        ]
    ), # expected, simpledct
    (
        {'ZONE':['Z1', 'Z2'], 'WALL':['W1', 'W2']},
        [
            [{'idfobj':'zone'}, {'field':['Name'], 'reference':['Z1', 'Z2']}],
            [{'idfobj':'wall'}, {'field':['Name'], 'reference':['W1', 'W2']}],
        ]
    ), # expected, simpledct
    (
        {'ZONE':['Z1', 'Z2'], 'WALL':['W1', 'W2']},
        [
            [{'idfobj':'zone'}, {'field':['Name'], 'reference':['Z1', 'Z2']}],
            [{'idfobj':'wall'}, {'field':['Name'], 'reference':['W1', 'W2']}],
            [], # put in random stuff
        ]
    ), # expected, simpledct
    (
        {'WALL':['W1', 'W2']},
        [
            [{'idfobj':'zone'}, {'field':['notName'], 'reference':['Z1', 'Z2']}],
            [{'idfobj':'wall'}, {'field':['Name'], 'reference':['W1', 'W2']}],
            [], # put in random stuff
        ]
    ), # expected, simpledct
    (
        {},
        [
            [{'idfobj':'zone'}, {'field':['notName'], 'reference':['Z1', 'Z2']}],
            [{'idfobj':'wall'}, {'field':['Name'], 'noreference':['W1', 'W2']}],
            [], # put in random stuff
        ]
    ), # expected, simpledct
    )
    for expected, simpledct in thedata:            
        result = iddindex.makename2refdct(simpledct)
        assert result == expected
    # the test with real data
    expected = {
        'ZONE':[u'ZoneNames',
                u'OutFaceEnvNames',
                u'ZoneAndZoneListNames',
                u'AirflowNetworkNodeAndZoneNames'],
        'WINDOW':[u'SubSurfNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'OutFaceEnvNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        'WALL:EXTERIOR':[u'SurfaceNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'HeatTranBaseSurfNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        'FENESTRATIONSURFACE:DETAILED':[u'SubSurfNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'OutFaceEnvNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        'BUILDINGSURFACE:DETAILED':[u'SurfaceNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'HeatTranBaseSurfNames',
                u'OutFaceEnvNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        
   }
    result = iddindex.makename2refdct(commdct)
    assert result == expected

def test_makeref2namesdct():
    """pytest for makeref2namesdct"""
    thedata = (
    (
        {
            'wall':['surface', 'surfandsubsurf'],
            'roof':['surface', 'surfandsubsurf'],
            'window':['surfandsubsurf', 'subsurf'],
            'skylight':['surfandsubsurf', 'subsurf'],
            'zone':['zname',]
        },
        {
            'surface':set(['wall', 'roof']),
            'subsurf':set(['window', 'skylight']),
            'surfandsubsurf':set(['wall', 'roof', 'window', 'skylight']),
            'zname':set(['zone']),
        }
    ), # name2refdct, expected
    (
        {
        'ZONE':[u'ZoneNames',
                u'OutFaceEnvNames',
                u'ZoneAndZoneListNames',
                u'AirflowNetworkNodeAndZoneNames'],
        'WINDOW':[u'SubSurfNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'OutFaceEnvNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        'WALL:EXTERIOR':[u'SurfaceNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'HeatTranBaseSurfNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        'FENESTRATIONSURFACE:DETAILED':[u'SubSurfNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'OutFaceEnvNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        'BUILDINGSURFACE:DETAILED':[u'SurfaceNames',
                u'SurfAndSubSurfNames',
                u'AllHeatTranSurfNames',
                u'HeatTranBaseSurfNames',
                u'OutFaceEnvNames',
                u'AllHeatTranAngFacNames',
                u'RadGroupAndSurfNames',
                u'SurfGroupAndHTSurfNames',
                u'AllShadingAndHTSurfNames'],
        
        },
        {u'AirflowNetworkNodeAndZoneNames': {'ZONE'},
         u'AllHeatTranAngFacNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WALL:EXTERIOR',
          'WINDOW'},
         u'AllHeatTranSurfNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WALL:EXTERIOR',
          'WINDOW'},
         u'AllShadingAndHTSurfNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WALL:EXTERIOR',
          'WINDOW'},
         u'HeatTranBaseSurfNames': {'BUILDINGSURFACE:DETAILED', 'WALL:EXTERIOR'},
         u'OutFaceEnvNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WINDOW',
          'ZONE'},
         u'RadGroupAndSurfNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WALL:EXTERIOR',
          'WINDOW'},
         u'SubSurfNames': {'FENESTRATIONSURFACE:DETAILED', 'WINDOW'},
         u'SurfAndSubSurfNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WALL:EXTERIOR',
          'WINDOW'},
         u'SurfGroupAndHTSurfNames': {'BUILDINGSURFACE:DETAILED',
          'FENESTRATIONSURFACE:DETAILED',
          'WALL:EXTERIOR',
          'WINDOW'},
         u'SurfaceNames': {'BUILDINGSURFACE:DETAILED', 'WALL:EXTERIOR'},
         u'ZoneAndZoneListNames': {'ZONE'},
         u'ZoneNames': {'ZONE'}}
    ), # name2refdct, expected
    )
    for name2refdct, expected in thedata:
        result = iddindex.makeref2namesdct(name2refdct)
        assert result == expected

def test_ref2names2commdct():
    """py.test for ref2names2commdct"""
    thedata = (
    (
# ------------
[
[
    {'idfobj':'referedto1'},
    {
        'field':['Name'],
        'reference':['rname11', 'rname12', 'rname_both'],
    },
    
],

[
    {'idfobj':'referedto2'},
    {
        'field':['Name'],
        'reference':['rname21', 'rname22', 'rname_both'],
    },
    
],  

[
    {'idfobj':'referingobj1'},
    {'field':['Name']},
    {
        'field':['referingfield'],
        'type':['object-list'],
        'object-list':['rname11'],
    }
    
],  

[
    {'idfobj':'referingobj2'},
    {'field':['Name']},
    {
        'field':['referingfield'],
        'type':['object-list'],
        'object-list':['rname_both'],
    }
    
],  

],
# ------------
[
[
    {'idfobj':'referedto1'},
    {
        'field':['Name'],
        'reference':['rname11', 'rname12', 'rname_both'],
    },
    
],

[
    {'idfobj':'referedto2'},
    {
        'field':['Name'],
        'reference':['rname21', 'rname22', 'rname_both'],
    },
    
],  

[
    {'idfobj':'referingobj1'},
    {'field':['Name']},
    {
        'field':['referingfield'],
        'type':['object-list'],
        'object-list':['rname11'],
        'pointsto':set(['referedto1'.upper()]),
    }
    
],  

[
    {'idfobj':'referingobj2'},
    {'field':['Name']},
    {
        'field':['referingfield'],
        'type':['object-list'],
        'object-list':['rname_both'],
        'pointsto':set(['REFEREDTO1', 'REFEREDTO2'])
    }
    
],  
],
    ), # commdct, expected
    )
    for commdct, expected in thedata:
        name2refdct = iddindex.makename2refdct(commdct)
        ref2names = iddindex.makeref2namesdct(name2refdct)
        result = iddindex.ref2names2commdct(ref2names, commdct)
        for r_item, e_item in zip(result, expected):
            assert r_item == e_item
            # the test below is ensure that the embedded data is not a copy,
            # but is pointing to the set in ref2names
            for item in r_item:
                try:
                    reference = item['object-list'][0]
                    pointsto = item['pointsto']
                    assert id(ref2names[reference]) == id(pointsto)
                except KeyError as e:
                    continue
    
# full commdct for the following idfobjs
# ['VERSION', 'ZONE', 'BUILDINGSURFACE:DETAILED', 'FENESTRATIONSURFACE:DETAILED',
# 'WINDOW', 'WALL:EXTERIOR']
# a clipped version of this is used above
# commdct = [[{u'format': [u'singleLine'],
#    u'group': u'Simulation Parameters',
#    u'idfobj': u'Version',
#    u'memo': [u'Specifies the EnergyPlus version of the IDF file.'],
#    u'unique-object': [u'']},
#   {u'default': [u'7.0'],
#    u'field': [u'Version Identifier'],
#    u'required-field': [u'']}],
#
#  [{u'format': [u'vertices'],
#    u'group': u'Thermal Zones and Surfaces',
#    u'idfobj': u'Zone',
#    u'memo': [u'Defines a thermal zone of the building.']},
#   {u'field': [u'Name'],
#    u'reference': [u'ZoneNames',
#     u'OutFaceEnvNames',
#     u'ZoneAndZoneListNames',
#     u'AirflowNetworkNodeAndZoneNames'],
#    u'required-field': [u''],
#    u'type': [u'alpha']},
#   {u'default': [u'0'],
#    u'field': [u'Direction of Relative North'],
#    u'type': [u'real'],
#    u'units': [u'deg']},
#   {u'default': [u'0'],
#    u'field': [u'X Origin'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'default': [u'0'],
#    u'field': [u'Y Origin'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'default': [u'0'],
#    u'field': [u'Z Origin'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'default': [u'1'],
#    u'field': [u'Type'],
#    u'maximum': [u'1'],
#    u'minimum': [u'1'],
#    u'type': [u'integer']},
#   {u'default': [u'1'],
#    u'field': [u'Multiplier'],
#    u'minimum': [u'1'],
#    u'type': [u'integer']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'Ceiling Height'],
#    u'note': [u'If this field is 0.0, negative or autocalculate, then the average height',
#     u'of the zone is automatically calculated and used in subsequent calculations.',
#     u'If this field is positive, then the number entered here will be used.',
#     u'Note that the Zone Ceiling Height is the distance from the Floor to',
#     u'the Ceiling in the Zone, not an absolute height from the ground.'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'Volume'],
#    u'note': [u'If this field is 0.0, negative or autocalculate, then the volume of the zone',
#     u'is automatically calculated and used in subsequent calculations.',
#     u'If this field is positive, then the number entered here will be used.'],
#    u'type': [u'real'],
#    u'units': [u'm3']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'Floor Area'],
#    u'note': [u'If this field is 0.0, negative or autocalculate, then the floor area of the zone',
#     u'is automatically calculated and used in subsequent calculations.',
#     u'If this field is positive, then the number entered here will be used.'],
#    u'type': [u'real'],
#    u'units': [u'm2']},
#   {u'field': [u'Zone Inside Convection Algorithm'],
#    u'key': [u'Simple',
#     u'TARP',
#     u'CeilingDiffuser',
#     u'AdaptiveConvectionAlgorithm',
#     u'TrombeWall'],
#    u'note': [u'Will default to same value as SurfaceConvectionAlgorithm:Inside object',
#     u'setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone',
#     u'Simple = constant natural convection (ASHRAE)',
#     u'TARP = variable natural convection based on temperature difference (ASHRAE)',
#     u'CeilingDiffuser = ACH based forced and mixed convection correlations',
#     u'for ceiling diffuser configuration with simple natural convection limit',
#     u'AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions',
#     u'TrombeWall = variable natural convection in an enclosed rectangular cavity'],
#    u'type': [u'choice']},
#   {u'field': [u'Zone Outside Convection Algorithm'],
#    u'key': [u'SimpleCombined',
#     u'TARP',
#     u'DOE-2',
#     u'MoWiTT',
#     u'AdaptiveConvectionAlgorithm'],
#    u'note': [u'Will default to same value as SurfaceConvectionAlgorithm:Outside object',
#     u'setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone',
#     u'SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model',
#     u'TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al.',
#     u'MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces',
#     u'DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces',
#     u'AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions'],
#    u'type': [u'choice']},
#   {u'default': [u'Yes'],
#    u'field': [u'Part of Total Floor Area'],
#    u'key': [u'Yes', u'No'],
#    u'type': [u'choice']}],
#
#  [{u'extensible:3': [u'-- duplicate last set of x,y,z coordinates (last 3 fields), remembering to remove ; from "inner" fields.'],
#    u'format': [u'vertices'],
#    u'group': u'Thermal Zones and Surfaces',
#    u'idfobj': u'BuildingSurface:Detailed',
#    u'memo': [u'Allows for detailed entry of building heat transfer surfaces. Does not include subsurfaces such as windows or doors.'],
#    u'min-fields': [u'19']},
#   {u'field': [u'Name'],
#    u'reference': [u'SurfaceNames',
#     u'SurfAndSubSurfNames',
#     u'AllHeatTranSurfNames',
#     u'HeatTranBaseSurfNames',
#     u'OutFaceEnvNames',
#     u'AllHeatTranAngFacNames',
#     u'RadGroupAndSurfNames',
#     u'SurfGroupAndHTSurfNames',
#     u'AllShadingAndHTSurfNames'],
#    u'required-field': [u''],
#    u'type': [u'alpha']},
#   {u'field': [u'Surface Type'],
#    u'key': [u'Floor', u'Wall', u'Ceiling', u'Roof'],
#    u'required-field': [u''],
#    u'type': [u'choice']},
#   {u'field': [u'Construction Name'],
#    u'note': [u'To be matched with a construction in this input file'],
#    u'object-list': [u'ConstructionNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Zone Name'],
#    u'note': [u'Zone the surface is a part of'],
#    u'object-list': [u'ZoneNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Outside Boundary Condition'],
#    u'key': [u'Adiabatic',
#     u'Surface',
#     u'Zone',
#     u'Outdoors',
#     u'Ground',
#     u'GroundFCfactorMethod',
#     u'OtherSideCoefficients',
#     u'OtherSideConditionsModel',
#     u'GroundSlabPreprocessorAverage',
#     u'GroundSlabPreprocessorCore',
#     u'GroundSlabPreprocessorPerimeter',
#     u'GroundBasementPreprocessorAverageWall',
#     u'GroundBasementPreprocessorAverageFloor',
#     u'GroundBasementPreprocessorUpperWall',
#     u'GroundBasementPreprocessorLowerWall'],
#    u'required-field': [u''],
#    u'type': [u'choice']},
#   {u'field': [u'Outside Boundary Condition Object'],
#    u'note': [u'Non-blank only if the field Outside Boundary Condition is Surface,',
#     u'Zone, OtherSideCoefficients or OtherSideConditionsModel',
#     u'If Surface, specify name of corresponding surface in adjacent zone or',
#     u'specify current surface name for internal partition separating like zones',
#     u'If Zone, specify the name of the corresponding zone and',
#     u'the program will generate the corresponding interzone surface',
#     u'If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients',
#     u'If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel'],
#    u'object-list': [u'OutFaceEnvNames'],
#    u'type': [u'object-list']},
#   {u'default': [u'SunExposed'],
#    u'field': [u'Sun Exposure'],
#    u'key': [u'SunExposed', u'NoSun'],
#    u'required-field': [u''],
#    u'type': [u'choice']},
#   {u'default': [u'WindExposed'],
#    u'field': [u'Wind Exposure'],
#    u'key': [u'WindExposed', u'NoWind'],
#    u'required-field': [u''],
#    u'type': [u'choice']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'View Factor to Ground'],
#    u'maximum': [u'1.0'],
#    u'minimum': [u'0.0'],
#    u'note': [u'From the exterior of the surface',
#     u'Unused if one uses the "reflections" options in Solar Distribution in Building input',
#     u'unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.',
#     u'autocalculate will automatically calculate this value from the tilt of the surface'],
#    u'type': [u'real']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'Number of Vertices'],
#    u'minimum': [u'3'],
#    u'note': [u'shown with 120 vertex coordinates -- extensible object',
#     u'"extensible" -- duplicate last set of x,y,z coordinates (last 3 fields),',
#     u'remembering to remove ; from "inner" fields.',
#     u'for clarity in any error messages, renumber the fields as well.',
#     u'(and changing z terminator to a comma "," for all but last one which needs a semi-colon ";")',
#     u'vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates',
#     u'are "relative" to the Zone Origin. If world, then building and zone origins are used',
#     u'for some internal calculations, but all coordinates are given in an "absolute" system.']},
#   {u'begin-extensible': [u''],
#    u'field': [u'Vertex 1 X-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 1 Y-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 1 Z-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 2 X-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 2 Y-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 2 Z-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 3 X-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 3 Y-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 3 Z-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 4 X-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 4 Y-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 4 Z-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 5 X-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 5 Y-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 5 Z-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 6 X-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 6 Y-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 6 Z-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 7 X-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 7 Y-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 7 Z-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 8 X-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 8 Y-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 8 Z-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 9 X-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 9 Y-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 9 Z-coordinate'], u'type': [u'real'], u'units': [u'm']},
#   {u'field': [u'Vertex 10 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 10 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 10 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 11 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 11 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 11 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 12 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 12 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 12 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 13 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 13 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 13 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 14 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 14 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 14 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 15 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 15 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 15 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 16 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 16 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 16 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 17 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 17 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 17 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 18 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 18 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 18 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 19 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 19 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 19 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 20 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 20 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 20 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 21 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 21 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 21 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 22 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 22 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 22 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 23 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 23 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 23 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 24 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 24 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 24 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 25 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 25 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 25 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 26 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 26 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 26 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 27 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 27 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 27 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 28 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 28 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 28 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 29 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 29 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 29 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 30 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 30 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 30 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 31 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 31 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 31 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 32 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 32 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 32 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 33 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 33 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 33 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 34 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 34 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 34 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 35 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 35 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 35 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 36 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 36 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 36 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 37 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 37 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 37 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 38 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 38 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 38 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 39 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 39 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 39 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 40 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 40 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 40 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 41 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 41 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 41 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 42 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 42 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 42 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 43 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 43 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 43 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 44 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 44 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 44 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 45 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 45 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 45 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 46 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 46 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 46 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 47 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 47 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 47 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 48 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 48 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 48 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 49 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 49 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 49 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 50 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 50 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 50 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 51 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 51 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 51 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 52 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 52 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 52 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 53 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 53 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 53 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 54 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 54 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 54 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 55 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 55 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 55 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 56 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 56 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 56 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 57 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 57 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 57 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 58 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 58 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 58 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 59 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 59 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 59 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 60 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 60 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 60 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 61 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 61 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 61 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 62 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 62 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 62 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 63 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 63 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 63 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 64 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 64 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 64 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 65 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 65 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 65 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 66 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 66 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 66 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 67 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 67 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 67 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 68 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 68 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 68 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 69 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 69 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 69 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 70 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 70 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 70 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 71 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 71 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 71 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 72 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 72 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 72 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 73 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 73 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 73 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 74 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 74 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 74 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 75 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 75 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 75 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 76 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 76 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 76 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 77 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 77 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 77 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 78 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 78 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 78 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 79 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 79 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 79 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 80 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 80 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 80 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 81 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 81 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 81 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 82 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 82 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 82 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 83 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 83 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 83 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 84 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 84 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 84 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 85 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 85 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 85 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 86 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 86 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 86 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 87 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 87 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 87 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 88 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 88 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 88 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 89 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 89 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 89 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 90 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 90 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 90 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 91 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 91 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 91 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 92 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 92 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 92 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 93 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 93 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 93 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 94 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 94 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 94 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 95 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 95 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 95 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 96 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 96 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 96 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 97 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 97 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 97 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 98 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 98 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 98 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 99 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 99 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 99 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 100 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 100 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 100 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 101 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 101 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 101 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 102 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 102 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 102 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 103 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 103 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 103 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 104 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 104 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 104 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 105 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 105 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 105 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 106 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 106 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 106 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 107 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 107 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 107 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 108 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 108 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 108 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 109 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 109 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 109 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 110 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 110 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 110 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 111 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 111 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 111 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 112 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 112 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 112 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 113 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 113 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 113 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 114 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 114 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 114 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 115 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 115 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 115 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 116 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 116 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 116 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 117 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 117 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 117 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 118 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 118 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 118 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 119 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 119 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 119 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 120 X-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 120 Y-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 120 Z-coordinate'],
#    u'type': [u'real'],
#    u'units': [u'm']}],
#
#  [{u'format': [u'vertices'],
#    u'group': u'Thermal Zones and Surfaces',
#    u'idfobj': u'FenestrationSurface:Detailed',
#    u'memo': [u'Allows for detailed entry of subsurfaces',
#     u'(windows, doors, glass doors, tubular daylighting devices).'],
#    u'min-fields': [u'19']},
#   {u'field': [u'Name'],
#    u'reference': [u'SubSurfNames',
#     u'SurfAndSubSurfNames',
#     u'AllHeatTranSurfNames',
#     u'OutFaceEnvNames',
#     u'AllHeatTranAngFacNames',
#     u'RadGroupAndSurfNames',
#     u'SurfGroupAndHTSurfNames',
#     u'AllShadingAndHTSurfNames'],
#    u'required-field': [u''],
#    u'type': [u'alpha']},
#   {u'field': [u'Surface Type'],
#    u'key': [u'Window',
#     u'Door',
#     u'GlassDoor',
#     u'TubularDaylightDome',
#     u'TubularDaylightDiffuser'],
#    u'required-field': [u''],
#    u'type': [u'choice']},
#   {u'field': [u'Construction Name'],
#    u'note': [u'To be matched with a construction in this input file'],
#    u'object-list': [u'ConstructionNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Building Surface Name'],
#    u'object-list': [u'SurfaceNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Outside Boundary Condition Object'],
#    u'note': [u'Non-blank only if base surface field Outside Boundary Condition is',
#     u'Surface or OtherSideCoefficients',
#     u"If Base Surface's Surface, specify name of corresponding subsurface in adjacent zone or",
#     u'specify current subsurface name for internal partition separating like zones',
#     u'If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients',
#     u"or leave blank to inherit Base Surface's OtherSide Coefficients"],
#    u'object-list': [u'OutFaceEnvNames'],
#    u'type': [u'object-list']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'View Factor to Ground'],
#    u'maximum': [u'1.0'],
#    u'minimum': [u'0.0'],
#    u'note': [u'From the exterior of the surface',
#     u'Unused if one uses the "reflections" options in Solar Distribution in Building input',
#     u'unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.',
#     u'autocalculate will automatically calculate this value from the tilt of the surface'],
#    u'type': [u'real']},
#   {u'field': [u'Shading Control Name'],
#    u'note': [u'enter the name of a WindowProperty:ShadingControl object',
#     u'used for windows and glass doors only',
#     u'If not specified, window or glass door has no shading (blind, roller shade, etc.)'],
#    u'object-list': [u'WindowShadeControlNames'],
#    u'type': [u'object-list']},
#   {u'field': [u'Frame and Divider Name'],
#    u'note': [u'Enter the name of a WindowProperty:FrameAndDivider object',
#     u'Used only for exterior windows (rectangular) and glass doors.',
#     u'Unused for triangular windows.',
#     u'If not specified (blank), window or glass door has no frame or divider',
#     u'and no beam solar reflection from reveal surfaces.'],
#    u'object-list': [u'WindowFrameAndDividerNames'],
#    u'type': [u'object-list']},
#   {u'default': [u'1.0'],
#    u'field': [u'Multiplier'],
#    u'minimum': [u'1.0'],
#    u'note': [u'Used only for Surface Type = WINDOW, GLASSDOOR or DOOR',
#     u'Non-integer values will be truncated to integer']},
#   {u'autocalculatable': [u''],
#    u'default': [u'autocalculate'],
#    u'field': [u'Number of Vertices'],
#    u'maximum': [u'4'],
#    u'minimum': [u'3'],
#    u'note': [u'vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates',
#     u'are "relative" to the Zone Origin. If world, then building and zone origins are used',
#     u'for some internal calculations, but all coordinates are given in an "absolute" system.']},
#   {u'field': [u'Vertex 1 X-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 1 Y-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 1 Z-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 2 X-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 2 Y-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 2 Z-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 3 X-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 3 Y-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 3 Z-coordinate'],
#    u'required-field': [u''],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 4 X-coordinate'],
#    u'note': [u'Not used for triangles'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 4 Y-coordinate'],
#    u'note': [u'Not used for triangles'],
#    u'type': [u'real'],
#    u'units': [u'm']},
#   {u'field': [u'Vertex 4 Z-coordinate'],
#    u'note': [u'Not used for triangles'],
#    u'type': [u'real'],
#    u'units': [u'm']}],
#
# [{u'group': u'Thermal Zones and Surfaces',
#    u'idfobj': u'Wall:Exterior',
#    u'memo': [u'Allows for simplified entry of exterior walls.',
#     u'View Factor to Ground is automatically calculated.']},
#   {u'field': [u'Name'],
#    u'reference': [u'SurfaceNames',
#     u'SurfAndSubSurfNames',
#     u'AllHeatTranSurfNames',
#     u'HeatTranBaseSurfNames',
#     u'AllHeatTranAngFacNames',
#     u'RadGroupAndSurfNames',
#     u'SurfGroupAndHTSurfNames',
#     u'AllShadingAndHTSurfNames'],
#    u'required-field': [u''],
#    u'type': [u'alpha']},
#   {u'field': [u'Construction Name'],
#    u'note': [u'To be matched with a construction in this input file'],
#    u'object-list': [u'ConstructionNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Zone Name'],
#    u'note': [u'Zone the surface is a part of'],
#    u'object-list': [u'ZoneNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Azimuth Angle'],
#    u'maximum': [u'360'],
#    u'minimum': [u'0'],
#    u'note': [u'Facing direction of outside of wall (S=180,N=0,E=90,W=270)'],
#    u'units': [u'deg']},
#   {u'default': [u'90'],
#    u'field': [u'Tilt Angle'],
#    u'maximum': [u'180'],
#    u'minimum': [u'0'],
#    u'note': [u'Walls are usually tilted 90 degrees'],
#    u'units': [u'deg']},
#   {u'field': [u'Starting X Coordinate'],
#    u'note': [u'Starting (x,y,z) coordinate is the Lower Left Corner of the Wall'],
#    u'units': [u'm']},
#   {u'field': [u'Starting Y Coordinate'], u'units': [u'm']},
#   {u'field': [u'Starting Z Coordinate'], u'units': [u'm']},
#   {u'field': [u'Length'], u'units': [u'm']},
#   {u'field': [u'Height'], u'units': [u'm']}],
#
#  [{u'group': u'Thermal Zones and Surfaces',
#    u'idfobj': u'Window',
#    u'memo': [u'Allows for simplified entry of Windows.']},
#   {u'field': [u'Name'],
#    u'reference': [u'SubSurfNames',
#     u'SurfAndSubSurfNames',
#     u'AllHeatTranSurfNames',
#     u'OutFaceEnvNames',
#     u'AllHeatTranAngFacNames',
#     u'RadGroupAndSurfNames',
#     u'SurfGroupAndHTSurfNames',
#     u'AllShadingAndHTSurfNames'],
#    u'required-field': [u''],
#    u'type': [u'alpha']},
#   {u'field': [u'Construction Name'],
#    u'note': [u'To be matched with a construction in this input file'],
#    u'object-list': [u'ConstructionNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Building Surface Name'],
#    u'note': [u'Name of Surface (Wall, usually) the Window is on (i.e., Base Surface)',
#     u'Window assumes the azimuth and tilt angles of the surface it is on.'],
#    u'object-list': [u'SurfaceNames'],
#    u'required-field': [u''],
#    u'type': [u'object-list']},
#   {u'field': [u'Shading Control Name'],
#    u'note': [u'enter the name of a WindowProperty:ShadingControl object',
#     u'used for windows and glass doors only',
#     u'If not specified, window or glass door has no shading (blind, roller shade, etc.)'],
#    u'object-list': [u'WindowShadeControlNames'],
#    u'type': [u'object-list']},
#   {u'field': [u'Frame and Divider Name'],
#    u'note': [u'Enter the name of a WindowProperty:FrameAndDivider object',
#     u'Used only for exterior windows (rectangular) and glass doors.',
#     u'Unused for triangular windows.',
#     u'If not specified (blank), window or glass door has no frame or divider',
#     u'and no beam solar reflection from reveal surfaces.'],
#    u'object-list': [u'WindowFrameAndDividerNames'],
#    u'type': [u'object-list']},
#   {u'default': [u'1.0'],
#    u'field': [u'Multiplier'],
#    u'minimum': [u'1.0'],
#    u'note': [u'Used only for Surface Type = WINDOW, GLASSDOOR or DOOR',
#     u'Non-integer values will be truncated to integer']},
#   {u'field': [u'Starting X Coordinate'],
#    u'note': [u'Window starting coordinate is specified relative to the Base Surface origin.'],
#    u'units': [u'm']},
#   {u'field': [u'Starting Z Coordinate'],
#    u'note': [u'How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)'],
#    u'units': [u'm']},
#   {u'field': [u'Length'], u'units': [u'm']},
#   {u'field': [u'Height'], u'units': [u'm']}]
# ]
